@{
    ViewData["Title"] = "RGB / HEX / HSL Color Converter - Clear & Separate";
}

<div class="container mt-4">
    <div class="tool-header">
        <h1 class="tool-title">RGB / HEX / HSL Color Converter</h1>
        <p class="tool-description">Use the converters below to transform colors easily and clearly!</p>
    </div>

    <hr />
    <!-- RGB to HEX and HSL -->
    <div>
        <h4>RGB to HEX & HSL</h4>
        <div class="row g-3 align-items-end">
            <div class="col-md-2">
                <label for="rgbR" class="form-label">Red (0-255):</label>
                <input type="number" id="rgbR" class="form-control" min="0" max="255" />
            </div>
            <div class="col-md-2">
                <label for="rgbG" class="form-label">Green (0-255):</label>
                <input type="number" id="rgbG" class="form-control" min="0" max="255" />
            </div>
            <div class="col-md-2">
                <label for="rgbB" class="form-label">Blue (0-255):</label>
                <input type="number" id="rgbB" class="form-control" min="0" max="255" />
            </div>
            <div class="col-md-2">
                <button id="btnRgbConvert" class="btn btn-primary">Convert</button>
            </div>

            <div class="col-md-3">
                <label for="rgbToHex" class="form-label">HEX:</label>
                <input type="text" id="rgbToHex" class="form-control" readonly />
            </div>
            <div class="col-md-3">
                <label for="rgbToHsl" class="form-label">HSL:</label>
                <input type="text" id="rgbToHsl" class="form-control" readonly />
            </div>
        </div>
    </div>

    <hr />
    <!-- HEX to RGB and HSL -->
    <div>
        <h4>HEX to RGB & HSL</h4>
        <div class="row g-3 align-items-end">
            <div class="col-md-3">
                <label for="hexInput" class="form-label">HEX (#RRGGBB):</label>
                <input type="text" id="hexInput" class="form-control"/>
            </div>
            <div class="col-md-2">
                <button id="btnHexConvert" class="btn btn-primary">Convert</button>
            </div>

            <div class="col-md-2">
                <label for="hexToR" class="form-label">Red:</label>
                <input type="number" id="hexToR" class="form-control" readonly />
            </div>
            <div class="col-md-2">
                <label for="hexToG" class="form-label">Green:</label>
                <input type="number" id="hexToG" class="form-control" readonly />
            </div>
            <div class="col-md-2">
                <label for="hexToB" class="form-label">Blue:</label>
                <input type="number" id="hexToB" class="form-control" readonly />
            </div>
            <div class="col-md-3">
                <label for="hexToHsl" class="form-label">HSL:</label>
                <input type="text" id="hexToHsl" class="form-control" readonly />
            </div>
        </div>
    </div>

    <hr />
    <!-- HSL to RGB and HEX -->
    <div>
        <h4>HSL to RGB & HEX</h4>
        <div class="row g-3 align-items-end">
            <div class="col-md-2">
                <label for="hslH" class="form-label">Hue (0-360):</label>
                <input type="number" id="hslH" class="form-control" min="0" max="360" />
            </div>
            <div class="col-md-2">
                <label for="hslS" class="form-label">Saturation (0-100):</label>
                <input type="number" id="hslS" class="form-control" min="0" max="100" />
            </div>
            <div class="col-md-2">
                <label for="hslL" class="form-label">Lightness (0-100):</label>
                <input type="number" id="hslL" class="form-control" min="0" max="100" />
            </div>
            <div class="col-md-2">
                <button id="btnHslConvert" class="btn btn-primary">Convert</button>
            </div>

            <div class="col-md-3">
                <label for="hslToRgb" class="form-label">RGB:</label>
                <input type="text" id="hslToRgb" class="form-control" readonly />
            </div>
            <div class="col-md-3">
                <label for="hslToHex" class="form-label">HEX:</label>
                <input type="text" id="hslToHex" class="form-control" readonly />
            </div>
        </div>
    </div>

    <hr />
    <div id="alertContainer"></div>
</div>

@section Scripts {
    <script>
        (() => {
            const alertContainer = document.getElementById('alertContainer');

            function showAlert(msg, type = 'danger') {
                alertContainer.innerHTML = `<div class="alert alert-${type}">${msg}</div>`;
                setTimeout(() => { alertContainer.innerHTML = ''; }, 3500);
            }

            // Helper clamp
            function clamp(value, min, max) {
                return Math.min(max, Math.max(min, value));
            }

            // RGB -> HEX
            function rgbToHex(r, g, b) {
                return "#" + [r, g, b].map(x => x.toString(16).padStart(2, '0')).join('').toUpperCase();
            }

            // HEX -> RGB
            function hexToRgb(hex) {
                let cleanHex = hex.replace(/^#/, '');
                if(cleanHex.length === 3) {
                    cleanHex = cleanHex.split('').map(c => c + c).join('');
                }
                if(cleanHex.length !== 6) return null;

                const bigint = parseInt(cleanHex, 16);
                const r = (bigint >> 16) & 255;
                const g = (bigint >> 8) & 255;
                const b = bigint & 255;
                return {r, g, b};
            }

            // RGB -> HSL
            function rgbToHsl(r, g, b) {
                r /= 255; g /= 255; b /= 255;
                const max = Math.max(r, g, b);
                const min = Math.min(r, g, b);
                let h, s, l = (max + min) / 2;

                if(max === min) {
                    h = s = 0;
                } else {
                    const d = max - min;
                    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                    switch(max) {
                        case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                        case g: h = (b - r) / d + 2; break;
                        case b: h = (r - g) / d + 4; break;
                    }
                    h /= 6;
                }
                return { 
                    h: Math.round(h * 360), 
                    s: Math.round(s * 100), 
                    l: Math.round(l * 100) 
                };
            }

            // HSL -> RGB
            function hslToRgb(h, s, l) {
                h /= 360;
                s /= 100;
                l /= 100;
                let r, g, b;

                if(s === 0) {
                    r = g = b = l;
                } else {
                    const hue2rgb = (p, q, t) => {
                        if(t < 0) t += 1;
                        if(t > 1) t -= 1;
                        if(t < 1/6) return p + (q - p) * 6 * t;
                        if(t < 1/2) return q;
                        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
                        return p;
                    }

                    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
                    const p = 2 * l - q;
                    r = hue2rgb(p, q, h + 1/3);
                    g = hue2rgb(p, q, h);
                    b = hue2rgb(p, q, h - 1/3);
                }

                return {
                    r: Math.round(r * 255),
                    g: Math.round(g * 255),
                    b: Math.round(b * 255)
                };
            }

            // RGB to HEX & HSL handler
            document.getElementById('btnRgbConvert').addEventListener('click', () => {
                const r = clamp(parseInt(document.getElementById('rgbR').value), 0, 255);
                const g = clamp(parseInt(document.getElementById('rgbG').value), 0, 255);
                const b = clamp(parseInt(document.getElementById('rgbB').value), 0, 255);

                if(isNaN(r) || isNaN(g) || isNaN(b)) {
                    showAlert('Please enter valid RGB values (0-255).');
                    return;
                }

                document.getElementById('rgbToHex').value = rgbToHex(r, g, b);
                const hsl = rgbToHsl(r, g, b);
                document.getElementById('rgbToHsl').value = `hsl(${hsl.h}, ${hsl.s}%, ${hsl.l}%)`;

                document.getElementById('colorPreview').style.backgroundColor = `rgb(${r}, ${g}, ${b})`;
            });

            // HEX to RGB & HSL handler
            document.getElementById('btnHexConvert').addEventListener('click', () => {
                const hex = document.getElementById('hexInput').value.trim();
                const rgb = hexToRgb(hex);

                if(!rgb) {
                    showAlert('Invalid HEX code! Use #RRGGBB or #RGB.');
                    return;
                }

                document.getElementById('hexToR').value = rgb.r;
                document.getElementById('hexToG').value = rgb.g;
                document.getElementById('hexToB').value = rgb.b;

                const hsl = rgbToHsl(rgb.r, rgb.g, rgb.b);
                document.getElementById('hexToHsl').value = `hsl(${hsl.h}, ${hsl.s}%, ${hsl.l}%)`;

                document.getElementById('colorPreview').style.backgroundColor = `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`;
            });

            // HSL to RGB & HEX handler
            document.getElementById('btnHslConvert').addEventListener('click', () => {
                let h = clamp(parseInt(document.getElementById('hslH').value), 0, 360);
                let s = clamp(parseInt(document.getElementById('hslS').value), 0, 100);
                let l = clamp(parseInt(document.getElementById('hslL').value), 0, 100);

                if(isNaN(h) || isNaN(s) || isNaN(l)) {
                    showAlert('Please enter valid HSL values.');
                    return;
                }

                const rgb = hslToRgb(h, s, l);
                document.getElementById('hslToRgb').value = `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`;
                document.getElementById('hslToHex').value = rgbToHex(rgb.r, rgb.g, rgb.b);

                document.getElementById('colorPreview').style.backgroundColor = `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`;
            });
        })();
    </script>
}
